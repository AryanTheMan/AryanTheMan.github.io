import random
import os

# Constants
SIZE = 4
UP = 'w'
DOWN = 's'
LEFT = 'a'
RIGHT = 'd'
EMPTY = 0
TILE_VALUES = [2, 4]

# Initialize the board with zeros
def init_board():
    return [[EMPTY] * SIZE for _ in range(SIZE)]

# Add a new tile to the board
def add_new_tile(board):
    empty_cells = [(r, c) for r in range(SIZE) for c in range(SIZE) if board[r][c] == EMPTY]
    if not empty_cells:
        return
    r, c = random.choice(empty_cells)
    board[r][c] = random.choice(TILE_VALUES)

# Print the board
def print_board(board):
    os.system('cls' if os.name == 'nt' else 'clear')  # Clear the screen
    for row in board:
        print('\t'.join(str(cell) if cell != EMPTY else '.' for cell in row))
        print()

# Move tiles and combine them
def move_left(board):
    new_board = [[EMPTY] * SIZE for _ in range(SIZE)]
    for r in range(SIZE):
        pos = 0
        for c in range(SIZE):
            if board[r][c] != EMPTY:
                if pos > 0 and new_board[r][pos - 1] == board[r][c]:
                    new_board[r][pos - 1] *= 2
                else:
                    new_board[r][pos] = board[r][c]
                    pos += 1
    return new_board

def move_right(board):
    reversed_board = [row[::-1] for row in board]
    new_board = move_left(reversed_board)
    return [row[::-1] for row in new_board]

def move_up(board):
    transposed_board = list(map(list, zip(*board)))
    new_board = move_left(transposed_board)
    return list(map(list, zip(*new_board)))

def move_down(board):
    transposed_board = list(map(list, zip(*board)))
    new_board = move_right(transposed_board)
    return list(map(list, zip(*new_board)))

# Check if the board has any valid moves
def can_move(board):
    for r in range(SIZE):
        for c in range(SIZE):
            if board[r][c] == EMPTY:
                return True
            if c < SIZE - 1 and board[r][c] == board[r][c + 1]:
                return True
            if r < SIZE - 1 and board[r][c] == board[r + 1][c]:
                return True
    return False

# Main game loop
def game_loop():
    board = init_board()
    add_new_tile(board)
    add_new_tile(board)

    while True:
        print_board(board)
        if not can_move(board):
            print("Game Over!")
            break

        move = input("Enter move (w/a/s/d): ").strip().lower()

        if move == UP:
            new_board = move_up(board)
        elif move == DOWN:
            new_board = move_down(board)
        elif move == LEFT:
            new_board = move_left(board)
        elif move == RIGHT:
            new_board = move_right(board)
        else:
            print("Invalid move! Use 'w', 'a', 's', or 'd'.")
            continue

        if new_board != board:
            board = new_board
            add_new_tile(board)

if __name__ == "__main__":
    game_loop()
